#!/usr/bin/env python3
"""
Script n·∫°p d·ªØ li·ªáu PDF v√†o Vector Database
Ch·ªâ ch·∫°y m·ªôt l·∫ßn ho·∫∑c khi c√≥ c·∫≠p nh·∫≠t t√†i li·ªáu
"""

import os
import sys
import argparse
from pathlib import Path
from typing import List
import glob

from utils.pdf_processor import PDFProcessor
from utils.embedding_manager import EmbeddingManager
from utils.qdrant_manager import QdrantManager
from config import Config

class DataIngestionPipeline:
    def __init__(self):
        """
        Kh·ªüi t·∫°o pipeline n·∫°p d·ªØ li·ªáu
        """
        print("üîß Kh·ªüi t·∫°o Data Ingestion Pipeline...")
        
        # Kh·ªüi t·∫°o c√°c components
        self.pdf_processor = PDFProcessor()
        self.embedding_manager = EmbeddingManager()
        self.qdrant_manager = QdrantManager()
        
        print("‚úÖ Pipeline ƒë√£ s·∫µn s√†ng!")
    
    def check_prerequisites(self):
        """
        Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
        """
        print("üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt...")
        
        # Ki·ªÉm tra Qdrant connection
        try:
            collection_info = self.qdrant_manager.get_collection_info()
            if "error" not in collection_info:
                print(f"‚úÖ K·∫øt n·ªëi Qdrant th√†nh c√¥ng")
                print(f"   Collection hi·ªán t·∫°i: {collection_info.get('vectors_count', 0)} vectors")
            else:
                print(f"‚ö†Ô∏è  Collection ch∆∞a t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Qdrant: {e}")
            return False
        
        # Ki·ªÉm tra embedding model
        try:
            test_embedding = self.embedding_manager.embed_query("test")
            print(f"‚úÖ Embedding model ho·∫°t ƒë·ªông (dimension: {len(test_embedding)})")
        except Exception as e:
            print(f"‚ùå L·ªói embedding model: {e}")
            return False
        
        return True
    
    def find_pdf_files(self, paths: List[str]) -> List[str]:
        """
        T√¨m t·∫•t c·∫£ file PDF t·ª´ paths (c√≥ th·ªÉ l√† file ho·∫∑c folder)
        """
        pdf_files = []
        
        for path in paths:
            path = Path(path)
            
            if path.is_file() and path.suffix.lower() == '.pdf':
                pdf_files.append(str(path))
                print(f"‚úÖ T√¨m th·∫•y file: {path}")
            elif path.is_dir():
                # T√¨m t·∫•t c·∫£ PDF trong folder
                pattern = str(path / "**" / "*.pdf")
                found_files = glob.glob(pattern, recursive=True)
                if found_files:
                    pdf_files.extend(found_files)
                    print(f"‚úÖ T√¨m th·∫•y {len(found_files)} PDF files trong {path}")
                    for f in found_files:
                        print(f"   - {f}")
                else:
                    print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y PDF n√†o trong: {path}")
            else:
                print(f"‚ö†Ô∏è  ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i: {path}")
        
        return pdf_files
    
    def check_data_folder(self) -> bool:
        """
        Ki·ªÉm tra th∆∞ m·ª•c data c√≥ t·ªìn t·∫°i v√† c√≥ PDF kh√¥ng
        """
        data_folder = Path("data")
        
        if not data_folder.exists():
            print("‚ùå Th∆∞ m·ª•c 'data' kh√¥ng t·ªìn t·∫°i!")
            print("üí° T·∫°o th∆∞ m·ª•c data v√† ƒë·∫∑t file PDF v√†o ƒë√≥:")
            print("   mkdir data")
            print("   cp your_files.pdf data/")
            return False
        
        pdf_files = self.find_pdf_files(["data"])
        
        if not pdf_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong th∆∞ m·ª•c 'data'!")
            print("üí° ƒê·∫∑t file PDF v√†o th∆∞ m·ª•c data:")
            print("   cp your_files.pdf data/")
            print("   # Ho·∫∑c t·∫°o subfolder:")
            print("   mkdir data/documents && cp *.pdf data/documents/")
            return False
        
        return True
    
    def process_pdfs(self, pdf_files: List[str], force_reprocess: bool = False) -> List[dict]:
        """
        X·ª≠ l√Ω danh s√°ch PDF files
        """
        if not pdf_files:
            print("‚ùå Kh√¥ng c√≥ file PDF n√†o ƒë·ªÉ x·ª≠ l√Ω!")
            return []
        
        print(f"üìÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(pdf_files)} PDF files...")
        
        all_documents = []
        success_count = 0
        
        for i, pdf_file in enumerate(pdf_files, 1):
            try:
                print(f"\nüìñ [{i}/{len(pdf_files)}] X·ª≠ l√Ω: {pdf_file}")
                
                # Ki·ªÉm tra file t·ªìn t·∫°i
                if not os.path.exists(pdf_file):
                    print(f"   ‚ùå File kh√¥ng t·ªìn t·∫°i: {pdf_file}")
                    continue
                
                # X·ª≠ l√Ω PDF
                documents = self.pdf_processor.process_pdf(pdf_file)
                
                if documents:
                    all_documents.extend(documents)
                    success_count += 1
                    print(f"   ‚úÖ T·∫°o ƒë∆∞·ª£c {len(documents)} chunks")
                else:
                    print(f"   ‚ö†Ô∏è  Kh√¥ng t·∫°o ƒë∆∞·ª£c chunk n√†o")
                    
            except Exception as e:
                print(f"   ‚ùå L·ªói x·ª≠ l√Ω {pdf_file}: {e}")
                continue
        
        print(f"\nüìä K·∫øt qu·∫£ x·ª≠ l√Ω:")
        print(f"   - Th√†nh c√¥ng: {success_count}/{len(pdf_files)} files")
        print(f"   - T·ªïng chunks: {len(all_documents)}")
        
        return all_documents
    
    def create_embeddings(self, documents: List[dict]) -> List[dict]:
        """
        T·∫°o embeddings cho documents
        """
        if not documents:
            return []
        
        print(f"\nüßÆ T·∫°o embeddings cho {len(documents)} documents...")
        
        try:
            documents_with_embeddings = self.embedding_manager.embed_documents(documents)
            print(f"‚úÖ ƒê√£ t·∫°o embeddings th√†nh c√¥ng")
            return documents_with_embeddings
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o embeddings: {e}")
            return []
    
    def store_in_vector_db(self, documents: List[dict], clear_existing: bool = False) -> bool:
        """
        L∆∞u documents v√†o vector database
        """
        if not documents:
            print("‚ùå Kh√¥ng c√≥ documents ƒë·ªÉ l∆∞u!")
            return False
        
        print(f"\nüíæ L∆∞u {len(documents)} documents v√†o Qdrant...")
        
        try:
            # X√≥a collection c≈© n·∫øu c·∫ßn
            if clear_existing:
                print("üóëÔ∏è  X√≥a collection c≈©...")
                self.qdrant_manager.delete_collection()
            
            # T·∫°o collection
            vector_size = self.embedding_manager.embedding_dimension
            self.qdrant_manager.create_collection(vector_size)
            
            # L∆∞u documents
            self.qdrant_manager.add_documents(documents)
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            collection_info = self.qdrant_manager.get_collection_info()
            print(f"‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng!")
            print(f"   Collection hi·ªán c√≥: {collection_info.get('vectors_count', 0)} vectors")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u v√†o Qdrant: {e}")
            return False
    
    def run_ingestion(self, pdf_paths: List[str] = None, clear_existing: bool = False, force_reprocess: bool = False):
        """
        Ch·∫°y to√†n b·ªô pipeline ingestion
        """
        print("üöÄ B·∫ÆT ƒê·∫¶U DATA INGESTION PIPELINE")
        print("=" * 60)
        
        # B∆∞·ªõc 1: Ki·ªÉm tra prerequisites
        if not self.check_prerequisites():
            print("‚ùå Kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ti√™n quy·∫øt!")
            return False
        
        # B∆∞·ªõc 2: X·ª≠ l√Ω paths
        if pdf_paths is None:
            # M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng th∆∞ m·ª•c data
            if not self.check_data_folder():
                return False
            pdf_paths = ["data"]
        
        # B∆∞·ªõc 3: T√¨m PDF files
        print(f"\nüìÅ T√¨m PDF files t·ª´: {pdf_paths}")
        pdf_files = self.find_pdf_files(pdf_paths)
        
        if not pdf_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y PDF files n√†o!")
            return False
        
        print(f"\n‚úÖ S·∫Ω x·ª≠ l√Ω {len(pdf_files)} PDF files")
        
        # B∆∞·ªõc 4: X·ª≠ l√Ω PDFs
        documents = self.process_pdfs(pdf_files, force_reprocess)
        
        if not documents:
            print("‚ùå Kh√¥ng c√≥ documents ƒë·ªÉ x·ª≠ l√Ω!")
            return False
        
        # B∆∞·ªõc 5: T·∫°o embeddings
        documents_with_embeddings = self.create_embeddings(documents)
        
        if not documents_with_embeddings:
            print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c embeddings!")
            return False
        
        # B∆∞·ªõc 6: L∆∞u v√†o vector DB
        success = self.store_in_vector_db(documents_with_embeddings, clear_existing)
        
        if success:
            print(f"\nüéâ HO√ÄN TH√ÄNH DATA INGESTION!")
            print(f"üìä Th·ªëng k√™:")
            print(f"   - PDF files: {len(pdf_files)}")
            print(f"   - Documents: {len(documents_with_embeddings)}")
            print(f"   - Collection: {Config.COLLECTION_NAME}")
            print(f"\nüí° B√¢y gi·ªù c√≥ th·ªÉ s·ª≠ d·ª•ng chatbot:")
            print(f"   python main.py demo")
            return True
        else:
            print(f"\n‚ùå DATA INGESTION TH·∫§T B·∫†I!")
            return False

def main():
    """
    Main function v·ªõi argument parsing
    """
    parser = argparse.ArgumentParser(
        description="Data Ingestion Pipeline cho PDF RAG System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python ingest_data.py                    # N·∫°p t·∫•t c·∫£ PDF t·ª´ th∆∞ m·ª•c 'data'
  python ingest_data.py file.pdf          # N·∫°p file c·ª• th·ªÉ
  python ingest_data.py folder/           # N·∫°p t·ª´ folder c·ª• th·ªÉ
  python ingest_data.py --clear           # X√≥a collection c≈© v√† n·∫°p t·ª´ 'data'
  python ingest_data.py --check           # Ki·ªÉm tra h·ªá th·ªëng
        """
    )
    
    parser.add_argument(
        "paths", 
        nargs='*',  # 0 ho·∫∑c nhi·ªÅu arguments
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn PDF files ho·∫∑c folders (m·∫∑c ƒë·ªãnh: th∆∞ m·ª•c 'data')"
    )
    
    parser.add_argument(
        "--clear", 
        action="store_true", 
        help="X√≥a collection c≈© tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi"
    )
    
    parser.add_argument(
        "--force", 
        action="store_true", 
        help="Force reprocess t·∫•t c·∫£ PDFs"
    )
    
    parser.add_argument(
        "--check", 
        action="store_true", 
        help="Ch·ªâ ki·ªÉm tra prerequisites v√† exit"
    )
    
    args = parser.parse_args()
    
    # Kh·ªüi t·∫°o pipeline
    pipeline = DataIngestionPipeline()
    
    # N·∫øu ch·ªâ check
    if args.check:
        success = pipeline.check_prerequisites()
        if success:
            pipeline.check_data_folder()
        collection_info = pipeline.qdrant_manager.get_collection_info()
        print(f"\nüìä Tr·∫°ng th√°i hi·ªán t·∫°i:")
        print(f"   Collection: {Config.COLLECTION_NAME}")
        print(f"   Vectors: {collection_info.get('vectors_count', 0)}")
        sys.exit(0 if success else 1)
    
    # X·ª≠ l√Ω paths - n·∫øu kh√¥ng c√≥ paths th√¨ d√πng th∆∞ m·ª•c data m·∫∑c ƒë·ªãnh
    pdf_paths = args.paths if args.paths else None
    
    # Ch·∫°y ingestion
    success = pipeline.run_ingestion(
        pdf_paths=pdf_paths,
        clear_existing=args.clear,
        force_reprocess=args.force
    )
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 
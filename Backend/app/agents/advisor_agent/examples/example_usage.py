#!/usr/bin/env python3
"""
V√≠ d·ª• s·ª≠ d·ª•ng h·ªá th·ªëng PDF RAG v·ªõi Google Gemini
M√¥ t·∫£ c√°c scenario s·ª≠ d·ª•ng kh√°c nhau
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from workflow.langgraph_workflow import PDFRAGWorkflow
from main import PDFRAGSystem

def example_1_basic_usage():
    """
    V√≠ d·ª• 1: S·ª≠ d·ª•ng c∆° b·∫£n - th√™m PDF v√† h·ªèi ƒë√°p v·ªõi Gemini
    """
    print("=" * 60)
    print("üìã V√ç D·ª§ 1: S·ª¨ D·ª§NG C∆† B·∫¢N (GEMINI)")
    print("=" * 60)
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = PDFRAGSystem()
    
    # Gi·∫£ s·ª≠ c√≥ file PDF m·∫´u
    sample_pdfs = [
        "data/research_paper.pdf",
        "data/technical_manual.pdf"
    ]
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    existing_pdfs = [pdf for pdf in sample_pdfs if os.path.exists(pdf)]
    
    if existing_pdfs:
        print(f"üìÑ Th√™m {len(existing_pdfs)} file PDF...")
        success = system.add_documents(existing_pdfs)
        
        if success:
            # ƒê·∫∑t c√¢u h·ªèi
            questions = [
                "T√†i li·ªáu n√†y n√≥i v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
                "C√≥ nh·ªØng ph∆∞∆°ng ph√°p n√†o ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p?",
                "K·∫øt lu·∫≠n ch√≠nh l√† g√¨?"
            ]
            
            for q in questions:
                result = system.ask_question(q)
                print()
    else:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file PDF m·∫´u")
        print("   H√£y ƒë·∫∑t file PDF v√†o th∆∞ m·ª•c 'data/' ƒë·ªÉ test")

def example_2_workflow_direct():
    """
    V√≠ d·ª• 2: S·ª≠ d·ª•ng tr·ª±c ti·∫øp LangGraph workflow v·ªõi Gemini
    """
    print("\n" + "=" * 60)
    print("üîß V√ç D·ª§ 2: S·ª¨ D·ª§NG TR·ª∞C TI·∫æP WORKFLOW (GEMINI)")
    print("=" * 60)
    
    # Kh·ªüi t·∫°o workflow
    workflow = PDFRAGWorkflow()
    
    # X·ª≠ l√Ω documents tr∆∞·ªõc
    pdf_paths = ["data/document1.pdf"]
    
    if any(os.path.exists(pdf) for pdf in pdf_paths):
        print("üìÑ X·ª≠ l√Ω documents...")
        doc_result = workflow.run_document_processing(pdf_paths)
        print(f"üìä K·∫øt qu·∫£: {doc_result}")
        
        # Truy v·∫•n
        query_result = workflow.run_query("T√≥m t·∫Øt n·ªôi dung ch√≠nh")
        print(f"ü§ñ C√¢u tr·∫£ l·ªùi (Gemini): {query_result['answer']}")
        print(f"üìö Ngu·ªìn: {query_result['sources']}")
    else:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file PDF ƒë·ªÉ test")

def example_3_batch_questions():
    """
    V√≠ d·ª• 3: X·ª≠ l√Ω nhi·ªÅu c√¢u h·ªèi li√™n ti·∫øp v·ªõi Gemini
    """
    print("\n" + "=" * 60)
    print("üìù V√ç D·ª§ 3: BATCH PROCESSING (GEMINI)")
    print("=" * 60)
    
    system = PDFRAGSystem()
    
    # Danh s√°ch c√¢u h·ªèi research
    research_questions = [
        "V·∫•n ƒë·ªÅ nghi√™n c·ª©u ch√≠nh l√† g√¨?",
        "Ph∆∞∆°ng ph√°p nghi√™n c·ª©u ƒë∆∞·ª£c s·ª≠ d·ª•ng?",
        "K·∫øt qu·∫£ quan tr·ªçng n√†o ƒë∆∞·ª£c t√¨m th·∫•y?",
        "Nh·ªØng h·∫°n ch·∫ø c·ªßa nghi√™n c·ª©u?",
        "H∆∞·ªõng nghi√™n c·ª©u t∆∞∆°ng lai ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t?"
    ]
    
    print("üìã X·ª≠ l√Ω batch questions v·ªõi Gemini...")
    for i, question in enumerate(research_questions, 1):
        print(f"\nüîç C√¢u h·ªèi {i}: {question}")
        result = system.ask_question(question)
        if result.get("status") == "success":
            print(f"‚úÖ ƒê√£ tr·∫£ l·ªùi (t·ª´ {result.get('relevant_docs_count', 0)} docs)")
        else:
            print(f"‚ùå L·ªói: {result.get('error')}")

def example_4_collection_management():
    """
    V√≠ d·ª• 4: Qu·∫£n l√Ω collection v√† monitoring
    """
    print("\n" + "=" * 60)
    print("üìä V√ç D·ª§ 4: QU·∫¢N L√ù COLLECTION")
    print("=" * 60)
    
    workflow = PDFRAGWorkflow()
    
    # Ki·ªÉm tra collection info
    print("üìã Th√¥ng tin collection:")
    info = workflow.qdrant_manager.get_collection_info()
    for key, value in info.items():
        print(f"   {key}: {value}")
    
    # Demo th√™m/x√≥a documents
    print("\nüîß Th·ª≠ nghi·ªám c√°c operations:")
    
    # Th·ª≠ t√¨m ki·∫øm v·ªõi query r·ªóng (ch·ªâ ƒë·ªÉ test)
    try:
        # T·∫°o embedding cho query test
        test_embedding = workflow.embedding_manager.embed_query("test")
        results = workflow.qdrant_manager.search_similar_documents(
            test_embedding.tolist(), 
            limit=3
        )
        print(f"üîç T√¨m th·∫•y {len(results)} documents trong collection")
        
        if results:
            print("üìÑ Top documents:")
            for i, doc in enumerate(results[:3], 1):
                print(f"   {i}. Score: {doc['score']:.3f} - Source: {doc['source']}")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Collection c√≥ th·ªÉ ch∆∞a c√≥ d·ªØ li·ªáu: {e}")

def example_5_error_handling():
    """
    V√≠ d·ª• 5: X·ª≠ l√Ω l·ªói v√† edge cases v·ªõi Gemini
    """
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  V√ç D·ª§ 5: X·ª¨ L√ù L·ªñI (GEMINI)")
    print("=" * 60)
    
    system = PDFRAGSystem()
    
    # Test v·ªõi file kh√¥ng t·ªìn t·∫°i
    print("üß™ Test 1: File kh√¥ng t·ªìn t·∫°i")
    result = system.add_documents(["nonexistent.pdf"])
    print(f"   K·∫øt qu·∫£: {'Th√†nh c√¥ng' if result else 'Th·∫•t b·∫°i'} (nh∆∞ mong ƒë·ª£i)")
    
    # Test v·ªõi query r·ªóng
    print("\nüß™ Test 2: Query r·ªóng")
    try:
        result = system.ask_question("")
        print(f"   K·∫øt qu·∫£: {result.get('status', 'unknown')}")
    except Exception as e:
        print(f"   L·ªói ƒë∆∞·ª£c b·∫Øt: {e}")
    
    # Test v·ªõi query r·∫•t d√†i
    print("\nüß™ Test 3: Query r·∫•t d√†i")
    long_query = "H√£y gi·∫£i th√≠ch chi ti·∫øt " * 100 + "v·∫•n ƒë·ªÅ n√†y?"
    try:
        result = system.ask_question(long_query)
        print(f"   K·∫øt qu·∫£: {result.get('status', 'unknown')}")
    except Exception as e:
        print(f"   L·ªói ƒë∆∞·ª£c b·∫Øt: {e}")

def example_6_custom_configuration():
    """
    V√≠ d·ª• 6: T√πy ch·ªânh c·∫•u h√¨nh Gemini
    """
    print("\n" + "=" * 60)
    print("‚öôÔ∏è  V√ç D·ª§ 6: T√ôY CH·ªàNH C·∫§U H√åNH GEMINI")
    print("=" * 60)
    
    from config import Config
    
    print("üìã C·∫•u h√¨nh Gemini hi·ªán t·∫°i:")
    print(f"   Gemini Model: {Config.GEMINI_MODEL}")
    print(f"   Temperature: {Config.GEMINI_TEMPERATURE}")
    print(f"   Max Output Tokens: {Config.GEMINI_MAX_OUTPUT_TOKENS}")
    print(f"   Embedding Model: {Config.EMBEDDING_MODEL}")
    print(f"   Chunk Size: {Config.CHUNK_SIZE}")
    print(f"   Top K Documents: {Config.TOP_K_DOCUMENTS}")
    print(f"   Similarity Threshold: {Config.SIMILARITY_THRESHOLD}")
    
    # C√≥ th·ªÉ dynamic thay ƒë·ªïi config
    print(f"\nüîß C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh config runtime:")
    print(f"   Config.GEMINI_MODEL = 'gemini-1.5-pro'  # Model ch·∫•t l∆∞·ª£ng cao h∆°n")
    print(f"   Config.GEMINI_TEMPERATURE = 0.2  # Creative h∆°n")
    print(f"   Config.GEMINI_MAX_OUTPUT_TOKENS = 4096  # Output d√†i h∆°n")
    print(f"   Config.TOP_K_DOCUMENTS = 10  # L·∫•y nhi·ªÅu docs h∆°n")
    print(f"   Config.SIMILARITY_THRESHOLD = 0.6  # Threshold th·∫•p h∆°n")

def example_7_gemini_specific():
    """
    V√≠ d·ª• 7: C√°c t√≠nh nƒÉng ƒë·∫∑c bi·ªát c·ªßa Gemini
    """
    print("\n" + "=" * 60)
    print("üåü V√ç D·ª§ 7: T√çNH NƒÇNG ƒê·∫∂C BI·ªÜT GEMINI")
    print("=" * 60)
    
    print("ü§ñ ∆Øu ƒëi·ªÉm c·ªßa Google Gemini:")
    print("   ‚úÖ Mi·ªÖn ph√≠ v·ªõi quota h√†o ph√≥ng")
    print("   ‚úÖ H·ªó tr·ª£ ti·∫øng Vi·ªát t·ª± nhi√™n")
    print("   ‚úÖ Context window l·ªõn (t·ªõi 2M tokens)")
    print("   ‚úÖ T·ªëc ƒë·ªô response nhanh")
    print("   ‚úÖ Kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng ƒë·ªÉ b·∫Øt ƒë·∫ßu")
    
    print(f"\nüìä Models available:")
    models = [
        ("gemini-1.5-flash", "Nhanh, ph√π h·ª£p h·∫ßu h·∫øt t√°c v·ª•"),
        ("gemini-1.5-pro", "Ch·∫•t l∆∞·ª£ng cao, ph·ª©c t·∫°p h∆°n"),
        ("gemini-1.0-pro", "Phi√™n b·∫£n c≈©, ·ªïn ƒë·ªãnh")
    ]
    
    for model, desc in models:
        print(f"   üîπ {model}: {desc}")
    
    print(f"\nüí° Tips s·ª≠ d·ª•ng Gemini hi·ªáu qu·∫£:")
    print("   ‚Ä¢ S·ª≠ d·ª•ng prompt r√µ r√†ng, c·ª• th·ªÉ")
    print("   ‚Ä¢ Gemini 1.5 Flash cho t·ªëc ƒë·ªô")
    print("   ‚Ä¢ Gemini 1.5 Pro cho ch·∫•t l∆∞·ª£ng")
    print("   ‚Ä¢ ƒêi·ªÅu ch·ªânh temperature cho creativity")
    print("   ‚Ä¢ T·∫≠n d·ª•ng context window l·ªõn")

def main():
    """
    Ch·∫°y t·∫•t c·∫£ v√≠ d·ª• v·ªõi Google Gemini
    """
    print("üöÄ CH·∫†Y T·∫§T C·∫¢ V√ç D·ª§ S·ª¨ D·ª§NG PDF RAG SYSTEM (GOOGLE GEMINI)")
    
    examples = [
        example_1_basic_usage,
        example_2_workflow_direct,
        example_3_batch_questions,
        example_4_collection_management,
        example_5_error_handling,
        example_6_custom_configuration,
        example_7_gemini_specific
    ]
    
    for example_func in examples:
        try:
            example_func()
        except Exception as e:
            print(f"‚ùå L·ªói trong {example_func.__name__}: {e}")
        
        input("\n‚èØÔ∏è  Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª• v·ªõi Google Gemini!")

if __name__ == "__main__":
    main() 
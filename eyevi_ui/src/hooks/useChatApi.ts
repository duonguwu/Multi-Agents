import { useState, useEffect, useCallback } from 'react';

// ƒê·ªãnh nghƒ©a user_id c·ªë ƒë·ªãnh
export const FIXED_USER_ID = 1;

// Cache cho s·∫£n ph·∫©m ƒë√£ fetch v·ªõi th·ªùi gian s·ªëng
interface ProductCacheItem {
  id: string;
  name: string;
  images?: string;
  newPrice?: number;
  image_url?: string;
  brand?: string;
  category?: string;
  color?: string;
  price?: string;
  description?: string;
  frameMaterial?: string;
  frameShape?: string;
  gender?: string;
  timestamp: number; // Th√™m timestamp ƒë·ªÉ qu·∫£n l√Ω cache
}

// Cache v·ªõi th·ªùi gian s·ªëng 3 ph√∫t
const CACHE_EXPIRATION = 3 * 60 * 1000; // 3 ph√∫t
const productCache: Record<string, ProductCacheItem> = {};

// Ki·ªÉm tra xem item c√≥ b·ªã h·∫øt h·∫°n kh√¥ng
const isCacheExpired = (item: ProductCacheItem) => 
  Date.now() - item.timestamp > CACHE_EXPIRATION;

// X√≥a c√°c item cache ƒë√£ h·∫øt h·∫°n
const cleanExpiredCache = () => {
  Object.keys(productCache).forEach(key => {
    if (isCacheExpired(productCache[key])) {
      delete productCache[key];
    }
  });
};

// Interface cho Product Data
export interface ProductData {
  product_id: string;
  name: string;
  brand?: string;
  category?: string;
  color?: string;
  price?: string;           // Gi√° d·∫°ng string (legacy)
  description?: string;
  frameMaterial?: string;
  frameShape?: string;
  gender?: string;
  image_url?: string;
  images?: string;          // JSON string ch·ª©a array URLs
  type?: string;
  variant?: string;
  search_type?: string;
  newPrice?: number;        // Gi√° m·ªõi d·∫°ng decimal/number (∆∞u ti√™n)
}

// Interface cho Order Item Data
export interface OrderItemData {
  id: number;
  order_id: number;
  product_id: number; // Thay ƒë·ªïi t·ª´ string sang number
  quantity: number;
  price: number; // Field name t·ª´ API
  created_at: string;
  updated_at: string;
  product_name: string;
  product_description?: string;
  // C√°c field b·ªï sung c√≥ th·ªÉ c√≥ t·ª´ API
  product_image?: string;
  product_brand?: string;
  product_color?: string;
  product_frameShape?: string;
}

// Interface cho Order Data
export interface OrderData {
  id: number;
  user_id: number;
  total_items: number;
  total_price: number;
  actual_price: number;
  shipping_address: string;
  phone: string;
  payment?: string; // Th√™m field payment
  order_status: string;
  created_at: string;
  updated_at: string;
  user_name: string;
  user_email: string;
  items?: OrderItemData[]; // Th√™m field items
}

export interface Message {
  id: string;
  content: string;
  sender: "user" | "bot";
  timestamp: Date;
  attachments?: {
    name: string;
    url: string;
    type: string;
  }[];
  products?: ProductData[];
  extracted_product_ids?: string[];
  orders?: OrderData[];
}

interface ChatResponse {
  response: string;
  agent_used?: string;
  session_id?: string;
  clarified_message?: string;
  analysis?: string;
  data?: ProductData[];
  user_info?: {
    user_id: string;
    name: string;
    phone: string;
  };
  orders?: OrderData[];
  extracted_product_ids?: string[];
  status: string;
  timestamp: string;
}

// URL c∆° s·ªü c·ªßa Host Agent API - s·ª≠ d·ª•ng proxy ƒë·ªÉ bypass CORS
const API_BASE_URL = "/api";

// Timeout cho API calls (5 ph√∫t)
const API_TIMEOUT = 300000; // 300 gi√¢y = 5 ph√∫t

// H√†m helper ƒë·ªÉ t·∫°o fetch v·ªõi timeout
const fetchWithTimeout = (url: string, options: RequestInit = {}, timeout: number = API_TIMEOUT) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  return fetch(url, {
    ...options,
    signal: controller.signal,
  }).finally(() => {
    clearTimeout(timeoutId);
  });
};

export const useChatApi = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(null);
  
  // Kh√¥i ph·ª•c sessionId t·ª´ localStorage khi component mount
  useEffect(() => {
    const savedSessionId = localStorage.getItem('eyevi_session_id');
    if (savedSessionId) {
      setSessionId(savedSessionId);
      console.log("Restored session from localStorage:", savedSessionId);
    }
    // Kh√¥ng t·ª± ƒë·ªông t·∫°o session m·ªõi, ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± t·∫°o khi c·∫ßn
  }, []);
  
  // L∆∞u sessionId v√†o localStorage khi thay ƒë·ªïi
  useEffect(() => {
    if (sessionId) {
      localStorage.setItem('eyevi_session_id', sessionId);
    }
  }, [sessionId]);
  
  const sendMessage = async (content: string, attachments?: File[]) => {
    setIsLoading(true);

    try {
      // ƒê·∫£m b·∫£o c√≥ sessionId tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn
      let currentSessionId = sessionId;
      if (!currentSessionId) {
        console.log("No session found, creating new session...");
        currentSessionId = await createNewSession();
        if (!currentSessionId) {
          throw new Error("Failed to create session");
        }
      }

      // T·∫°o FormData ƒë·ªÉ g·ª≠i request
      const formData = new FormData();
      formData.append("message", content);
      formData.append("user_id", FIXED_USER_ID.toString());
      formData.append("session_id", currentSessionId);

      console.log("Sending message with session:", currentSessionId);
      
      // Th√™m files n·∫øu c√≥
      if (attachments && attachments.length > 0) {
        attachments.forEach(file => {
          formData.append("files", file);
        });
      }
      console.log("formdata: ", formData)
      
      // G·ª≠i request ƒë·∫øn Host Agent v·ªõi timeout
      const response = await fetchWithTimeout(`${API_BASE_URL}/chat`, {
        method: "POST",
        body: formData,
      });
      console.log("response: ", response)
      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }
      
      const data: ChatResponse = await response.json();
      
      // X√≥a cache n·∫øu c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API chat
      if (data.data && data.data.length > 0) {
        console.log("Clearing product cache due to new product data from chat API");
        clearProductCache();
      }
      
      // L∆∞u session_id n·∫øu c√≥
      if (data.session_id) {
        setSessionId(data.session_id);
      }
      
      return data;
    } catch (error) {
      console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  const getChatHistory = async () => {
    if (!sessionId) return [];

    try {
      const response = await fetchWithTimeout(`${API_BASE_URL}/sessions/${sessionId}/history?user_id=${FIXED_USER_ID}`);

      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }

      const data = await response.json();
      return data.messages || [];
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch s·ª≠ chat:", error);
      return [];
    }
  };

  // H√†m l·∫•y l·ªãch s·ª≠ chat t·ª´ session_id c·ª• th·ªÉ (ƒë·ªÉ xem l·ªãch s·ª≠)
  const getChatHistoryBySessionId = async (targetSessionId: string) => {
    try {
      const response = await fetchWithTimeout(`${API_BASE_URL}/sessions/${targetSessionId}/history?user_id=${FIXED_USER_ID}`);

      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }

      const data = await response.json();
      return data.messages || [];
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch s·ª≠ chat theo session ID:", error);
      return [];
    }
  };
  
  const createNewSession = async () => {
    try {
      console.log("üöÄ Creating new session... Current sessionId:", sessionId);
      const formData = new FormData();
      formData.append("user_id", FIXED_USER_ID.toString());

      const response = await fetchWithTimeout(`${API_BASE_URL}/sessions/create`, {
        method: "POST",
        body: formData
      });

      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ New session created:", data.session_id, "Previous:", sessionId);
      setSessionId(data.session_id);
      return data.session_id;
    } catch (error) {
      console.error("L·ªói khi t·∫°o phi√™n m·ªõi:", error);
      return null;
    }
  };
  
  const clearChatHistory = async () => {
    if (!sessionId) return false;
    
    try {
      const response = await fetchWithTimeout(`${API_BASE_URL}/sessions/${sessionId}/history?user_id=${FIXED_USER_ID}`, {
        method: "DELETE"
      });
      
      return response.ok;
    } catch (error) {
      console.error("L·ªói khi x√≥a l·ªãch s·ª≠ chat:", error);
      return false;
    }
  };
  
  // H√†m l·∫•y th√¥ng tin s·∫£n ph·∫©m theo ID v·ªõi cache
  const getProductById = useCallback(async (productId: string) => {
    // X√≥a cache ƒë√£ h·∫øt h·∫°n
    cleanExpiredCache();
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    const cachedProduct = productCache[productId];
    if (cachedProduct && !isCacheExpired(cachedProduct)) {
      console.log(`Using cached data for product ${productId}`);
      return cachedProduct;
    }
    
    try {
      console.log(`Calling API to get product with ID: ${productId}`);
      const response = await fetch(`${API_BASE_URL}/products/${productId}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${productId}`);
          return null;
        }
        throw new Error(`L·ªói: ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`API response for product ${productId}:`, data);
      
      // L∆∞u v√†o cache v·ªõi timestamp
      productCache[productId] = {
        ...data,
        timestamp: Date.now()
      };
      
      return data;
    } catch (error) {
      console.error(`L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m ${productId}:`, error);
      return null;
    }
  }, []);
  
  // H√†m l·∫•y th√¥ng tin nhi·ªÅu s·∫£n ph·∫©m theo danh s√°ch ID v·ªõi cache
  const getProductsByIds = useCallback(async (productIds: string[]) => {
    if (!productIds.length) return [];
    
    // X√≥a cache ƒë√£ h·∫øt h·∫°n
    cleanExpiredCache();
    
    // L·ªçc ra nh·ªØng ID ch∆∞a c√≥ trong cache ho·∫∑c ƒë√£ h·∫øt h·∫°n
    const uncachedIds = productIds.filter(id => 
      !productCache[id] || isCacheExpired(productCache[id])
    );
    
    // N·∫øu t·∫•t c·∫£ ƒë√£ c√≥ trong cache v√† c√≤n hi·ªáu l·ª±c, tr·∫£ v·ªÅ t·ª´ cache
    if (uncachedIds.length === 0) {
      console.log('Using cached data for all products');
      return productIds.map(id => productCache[id]);
    }
    
    try {
      const idsParam = uncachedIds.join(',');
      console.log(`Calling API to get products with IDs: ${idsParam}`);
      const response = await fetch(`${API_BASE_URL}/products?product_ids=${idsParam}`);
      
      if (!response.ok) {
        throw new Error(`L·ªói: ${response.status}`);
      }
      
      const newData = await response.json() as ProductCacheItem[];
      console.log(`API response for products [${idsParam}]:`, newData);
      
      // L∆∞u c√°c s·∫£n ph·∫©m m·ªõi v√†o cache v·ªõi timestamp
      if (newData && newData.length > 0) {
        newData.forEach((product: ProductCacheItem) => {
          if (product && product.id) {
            productCache[product.id] = {
              ...product,
              timestamp: Date.now()
            };
          }
        });
      }
      
      // Tr·∫£ v·ªÅ t·∫•t c·∫£ s·∫£n ph·∫©m (t·ª´ cache + m·ªõi fetch)
      return productIds.map(id => productCache[id] || null).filter(Boolean);
    } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error);
      // Tr·∫£ v·ªÅ nh·ªØng s·∫£n ph·∫©m c√≥ trong cache
      return productIds.map(id => productCache[id] || null).filter(Boolean);
    }
  }, []);
  
  // H√†m ƒë·ªÉ x√≥a cache s·∫£n ph·∫©m
  const clearProductCache = useCallback(() => {
    Object.keys(productCache).forEach(key => delete productCache[key]);
    console.log("ƒê√£ x√≥a to√†n b·ªô cache s·∫£n ph·∫©m");
  }, []);
  
  return {
    sendMessage,
    getChatHistory,
    getChatHistoryBySessionId,
    createNewSession,
    clearChatHistory,
    getProductById,
    getProductsByIds,
    clearProductCache,
    isLoading,
    sessionId
  };
}; 
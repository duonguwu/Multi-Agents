#!/usr/bin/env python3
"""
CLI Chat Interface cho Order Management Agent
"""
import asyncio
import sys
import os
import logging
from typing import AsyncIterator
import signal
from datetime import datetime

# Th√™m src v√†o Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Import configuration v√† dependencies
from src.config import settings
from src.database import initialize_database_connections
from src.chatbot.langgraph_bot import ChatbotGraph

# Thi·∫øt l·∫≠p logging cho CLI
logging.basicConfig(
    level=logging.WARNING,  # Ch·ªâ hi·ªÉn th·ªã warning v√† error ƒë·ªÉ CLI s·∫°ch s·∫Ω
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("cli.log")
    ]
)
logger = logging.getLogger("cli")

class ChatCLI:
    def __init__(self):
        self.chatbot = None
        self.session_id = f"cli_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.running = True
        
    async def initialize(self):
        """Kh·ªüi t·∫°o chatbot v√† database connections"""
        try:
            print("üöÄ ƒêang kh·ªüi t·∫°o h·ªá th·ªëng...")
            
            # Kh·ªüi t·∫°o database connections
            initialize_database_connections()
            print("‚úÖ Database ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng")
            
            # Kh·ªüi t·∫°o chatbot
            self.chatbot = ChatbotGraph()
            print("‚úÖ Chatbot ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
            
            print("üéâ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!")
            
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}")
            logger.error(f"Failed to initialize: {str(e)}")
            sys.exit(1)
    
    def print_welcome(self):
        """In th√¥ng ƒëi·ªáp ch√†o m·ª´ng"""
        print("\n" + "="*60)
        print("ü§ñ CH√ÄO M·ª™NG ƒê√äN ORDER MANAGEMENT CHATBOT CLI")
        print("="*60)
        print("G√µ 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n")
        print("G√µ 'quit', 'exit' ho·∫∑c Ctrl+C ƒë·ªÉ tho√°t")
        print("G√µ 'clear' ƒë·ªÉ x√≥a m√†n h√¨nh")
        print("="*60 + "\n")
    
    def print_commands_help(self):
        """In danh s√°ch l·ªánh CLI"""
        print("\nüìã C√ÅC L·ªÜNH CLI:")
        print("  help    - Hi·ªÉn th·ªã tr·ª£ gi√∫p t·ª´ chatbot")
        print("  quit    - Tho√°t ch∆∞∆°ng tr√¨nh")
        print("  exit    - Tho√°t ch∆∞∆°ng tr√¨nh") 
        print("  clear   - X√≥a m√†n h√¨nh")
        print("  status  - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng")
        print("\nüí¨ Ho·∫∑c b·∫°n c√≥ th·ªÉ chat tr·ª±c ti·∫øp v·ªõi bot!")
        print("   V√≠ d·ª•: 'T√¨m s·∫£n ph·∫©m iPhone'")
        print("   V√≠ d·ª•: 'Th√™m s·∫£n ph·∫©m ID 123 v√†o gi·ªè h√†ng'\n")
    
    async def process_user_input(self, user_input: str) -> bool:
        """X·ª≠ l√Ω input t·ª´ user, tr·∫£ v·ªÅ False n·∫øu mu·ªën tho√°t"""
        user_input = user_input.strip()
        
        # X·ª≠ l√Ω c√°c l·ªánh CLI ƒë·∫∑c bi·ªát
        if user_input.lower() in ['quit', 'exit']:
            return False
        elif user_input.lower() == 'clear':
            os.system('cls' if os.name == 'nt' else 'clear')
            self.print_welcome()
            return True
        elif user_input.lower() == 'status':
            await self.print_status()
            return True
        elif user_input.lower() == 'cli-help':
            self.print_commands_help()
            return True
        
        # N·∫øu kh√¥ng c√≥ input, kh√¥ng l√†m g√¨
        if not user_input:
            return True
        
        # X·ª≠ l√Ω tin nh·∫Øn chat
        await self.chat_with_streaming(user_input)
        return True
    
    async def chat_with_streaming(self, message: str):
        """Chat v·ªõi bot s·ª≠ d·ª•ng streaming response"""
        try:
            print(f"\nüë§ B·∫°n: {message}")
            
            # S·ª≠ d·ª•ng streaming version n·∫øu c√≥
            if hasattr(self.chatbot, 'process_message_streaming'):
                bot_label_printed = False
                response_buffer = ""
                
                async for chunk in self.chatbot.process_message_streaming(message, self.session_id):
                    # X·ª≠ l√Ω chunk ƒë·∫∑c bi·ªát ƒë·ªÉ clear processing message
                    if chunk.startswith("\rü§ñ Bot: "):
                        print(f"\rü§ñ Bot: ", end="", flush=True)
                        bot_label_printed = True
                        continue
                    
                    # In label bot n·∫øu ch∆∞a in
                    if not bot_label_printed:
                        print("ü§ñ Bot: ", end="", flush=True)
                        bot_label_printed = True
                    
                    print(chunk, end="", flush=True)
                    response_buffer += chunk
                
                print()  # New line sau khi ho√†n th√†nh
                
                # Log response ƒë·ªÉ debug n·∫øu c·∫ßn
                if response_buffer:
                    logger.info(f"Complete response: {response_buffer}")
                    
            else:
                # Fallback v·ªÅ sync version n·∫øu streaming kh√¥ng c√≥
                print("ü§ñ Bot: ", end="", flush=True)
                response = self.chatbot.process_message(message, self.session_id)
                
                # Gi·∫£ l·∫≠p streaming v·ªõi hi·ªáu ·ª©ng typing
                for char in response:
                    print(char, end="", flush=True)
                    await asyncio.sleep(0.02)  # Delay nh·ªè ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng
                print()
                
        except Exception as e:
            print(f"\n‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {str(e)}")
            logger.error(f"Error processing message: {str(e)}")
            # In g·ª£i √Ω c√°ch s·ª≠ d·ª•ng
            print("üí° H√£y th·ª≠ l·∫°i ho·∫∑c g√µ 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n")
    
    async def print_status(self):
        """In tr·∫°ng th√°i h·ªá th·ªëng"""
        print("\nüìä TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG:")
        print(f"  Session ID: {self.session_id}")
        print(f"  Chatbot: {'‚úÖ Ho·∫°t ƒë·ªông' if self.chatbot else '‚ùå Kh√¥ng ho·∫°t ƒë·ªông'}")
        
        # Ki·ªÉm tra k·∫øt n·ªëi database
        try:
            from src.database import DatabaseConnection
            db = DatabaseConnection.get_instance()
            print("  MySQL Database: ‚úÖ ƒê√£ k·∫øt n·ªëi")
        except Exception as e:
            print(f"  MySQL Database: ‚ùå L·ªói - {str(e)}")
        
        try:
            from src.database import MongoDBConnection
            mongo = MongoDBConnection.get_instance()
            print("  MongoDB: ‚úÖ ƒê√£ k·∫øt n·ªëi")
        except Exception as e:
            print(f"  MongoDB: ‚ùå L·ªói - {str(e)}")
        
        print()
    
    def setup_signal_handlers(self):
        """Setup signal handlers cho graceful shutdown"""
        def signal_handler(signum, frame):
            print("\n\nüëã ƒêang tho√°t ch∆∞∆°ng tr√¨nh...")
            self.running = False
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def run_interactive_loop(self):
        """Ch·∫°y v√≤ng l·∫∑p t∆∞∆°ng t√°c ch√≠nh"""
        self.setup_signal_handlers()
        self.print_welcome()
        
        while self.running:
            try:
                # S·ª≠ d·ª•ng input th√¥ng th∆∞·ªùng v√¨ asyncio input ph·ª©c t·∫°p
                user_input = input("üí¨ B·∫°n: ")
                should_continue = await self.process_user_input(user_input)
                
                if not should_continue:
                    break
                    
            except (EOFError, KeyboardInterrupt):
                print("\n\nüëã ƒêang tho√°t ch∆∞∆°ng tr√¨nh...")
                break
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}")
                logger.error(f"Unexpected error: {str(e)}")
    
    async def run(self):
        """Ch·∫°y CLI application"""
        try:
            await self.initialize()
            await self.run_interactive_loop()
        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng: {str(e)}")
            logger.error(f"Critical error: {str(e)}")
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """D·ªçn d·∫πp resources khi tho√°t"""
        try:
            print("üßπ ƒêang d·ªçn d·∫πp...")
            
            # ƒê√≥ng database connections
            try:
                from src.database import DatabaseConnection, MongoDBConnection
                DatabaseConnection.get_instance().close()
                MongoDBConnection.get_instance().close()
            except:
                pass
                
            print("‚úÖ D·ªçn d·∫πp ho√†n t·∫•t")
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp: {str(e)}")

async def main():
    """Entry point cho CLI"""
    cli = ChatCLI()
    await cli.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!")
        sys.exit(0) 
#!/bin/bash

# EyeVi Agent System - Deployment Script
# Script ƒë·ªÉ setup v√† deploy h·ªá th·ªëng EyeVi Agent

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ EyeVi Agent System - Deployment Manager${NC}"
echo "=============================================="

# Check if we're in the right directory
if [ ! -d "host_agent" ] || [ ! -d "order_agent" ] || [ ! -d "advisor_agent" ] || [ ! -d "search_agent" ]; then
    echo -e "${RED}‚ùå Vui l√≤ng ch·∫°y script n√†y trong th∆∞ m·ª•c app/agents/${NC}"
    echo "C·∫•u tr√∫c th∆∞ m·ª•c c·∫ßn c√≥: host_agent/, order_agent/, advisor_agent/, search_agent/"
    exit 1
fi

# Function to copy .env files
copy_env_files() {
    echo -e "${BLUE}üìÅ Copying configured .env files to agent folders...${NC}"
    
    # Check if .env.example files exist
    missing_files=false
    env_files=("host_agent.env.example" "order_agent.env.example" "advisor_agent.env.example" "search_agent.env.example")
    
    for file in "${env_files[@]}"; do
        if [ ! -f "$file" ]; then
            echo -e "${RED}‚ùå Missing $file${NC}"
            missing_files=true
        fi
    done
    
    if [ "$missing_files" = true ]; then
        echo -e "${RED}M·ªôt s·ªë file .env.example b·ªã thi·∫øu!${NC}"
        exit 1
    fi
    
    # Copy configured .env.example files to each agent folder
    cp host_agent.env.example host_agent/.env
    echo -e "${GREEN}‚úÖ host_agent/.env${NC}"
    
    cp order_agent.env.example order_agent/.env
    echo -e "${GREEN}‚úÖ order_agent/.env${NC}"
    
    cp advisor_agent.env.example advisor_agent/.env
    echo -e "${GREEN}‚úÖ advisor_agent/.env${NC}"
    
    cp search_agent.env.example search_agent/.env
    echo -e "${GREEN}‚úÖ search_agent/.env${NC}"
    
    echo
    echo -e "${GREEN}üéâ Copy ho√†n t·∫•t! C√°c file .env ƒë√£ ƒë∆∞·ª£c deploy v√†o t·ª´ng agent folder.${NC}"
}

# Function to deploy system
deploy_system() {
    echo -e "${BLUE}üê≥ Starting EyeVi Agent System with Docker Compose...${NC}"
    
    # Check if .env files exist
    missing_env=false
    agents=("host_agent" "order_agent" "advisor_agent" "search_agent")
    
    for agent in "${agents[@]}"; do
        if [ ! -f "${agent}/.env" ]; then
            echo -e "${RED}‚ùå Missing ${agent}/.env${NC}"
            missing_env=true
        fi
    done
    
    if [ "$missing_env" = true ]; then
        echo -e "${RED}M·ªôt s·ªë file .env b·ªã thi·∫øu. Vui l√≤ng ch·∫°y option 1 tr∆∞·ªõc.${NC}"
        exit 1
    fi
    
    # Start docker-compose
    echo -e "${BLUE}Building and starting containers...${NC}"
    docker-compose up -d
    
    echo
    echo -e "${GREEN}üéâ Deployment ho√†n t·∫•t!${NC}"
    echo
    echo -e "${BLUE}üìä Ki·ªÉm tra tr·∫°ng th√°i:${NC}"
    docker-compose ps
    
    echo
    echo -e "${BLUE}üîó Service URLs:${NC}"
    echo "  ‚Ä¢ Host Agent:    http://localhost:8080"
    echo "  ‚Ä¢ Order Agent:   http://localhost:10000"
    echo "  ‚Ä¢ Advisor Agent: http://localhost:10001"
    echo "  ‚Ä¢ Search Agent:  http://localhost:10002"
    
    echo
    echo -e "${BLUE}üìã Useful commands:${NC}"
    echo "  ‚Ä¢ View logs:     docker-compose logs -f"
    echo "  ‚Ä¢ Stop system:   docker-compose down"
    echo "  ‚Ä¢ Restart:       docker-compose restart"
}

# Function to deploy system with no cache
deploy_system_no_cache() {
    echo -e "${BLUE}üî® Building and deploying with no cache (fresh build)...${NC}"
    
    # Check if .env files exist
    missing_env=false
    agents=("host_agent" "order_agent" "advisor_agent" "search_agent")
    
    for agent in "${agents[@]}"; do
        if [ ! -f "${agent}/.env" ]; then
            echo -e "${RED}‚ùå Missing ${agent}/.env${NC}"
            missing_env=true
        fi
    done
    
    if [ "$missing_env" = true ]; then
        echo -e "${RED}M·ªôt s·ªë file .env b·ªã thi·∫øu. Vui l√≤ng ch·∫°y option 1 tr∆∞·ªõc.${NC}"
        exit 1
    fi
    
    # Stop any running containers first
    echo -e "${BLUE}Stopping existing containers...${NC}"
    docker-compose down
    
    # Build with no cache and start
    echo -e "${BLUE}Building containers with no cache...${NC}"
    docker-compose build --no-cache
    
    echo -e "${BLUE}Starting fresh containers...${NC}"
    docker-compose up -d
    
    echo
    echo -e "${GREEN}üéâ Fresh deployment ho√†n t·∫•t!${NC}"
    echo
    echo -e "${BLUE}üìä Ki·ªÉm tra tr·∫°ng th√°i:${NC}"
    docker-compose ps
    
    echo
    echo -e "${BLUE}üîó Service URLs:${NC}"
    echo "  ‚Ä¢ Host Agent:    http://localhost:8080"
    echo "  ‚Ä¢ Order Agent:   http://localhost:10000"
    echo "  ‚Ä¢ Advisor Agent: http://localhost:10001"
    echo "  ‚Ä¢ Search Agent:  http://localhost:10002"
}

# Function to show menu
show_menu() {
    echo
    echo -e "${BLUE}üìã Ch·ªçn h√†nh ƒë·ªông:${NC}"
    echo "  1) Copy .env files v√† deploy system"
    echo "  2) Deploy system (ch·ªâ ch·∫°y docker-compose)"
    echo "  3) Build v√† deploy no cache (fresh build)"
    echo "  4) Stop system (docker-compose down)"
    echo "  5) View logs"
    echo "  6) Exit"
    echo
    echo -e "${YELLOW}üí° L∆∞u √Ω: Tr∆∞·ªõc khi ch·ªçn option 1, h√£y ch·ªânh s·ª≠a c√°c file:${NC}"
    echo "     host_agent.env.example, order_agent.env.example,"
    echo "     advisor_agent.env.example, search_agent.env.example"
    echo
}

# Function to stop system
stop_system() {
    echo -e "${BLUE}üõë Stopping EyeVi Agent System...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ System stopped${NC}"
}

# Function to view logs
view_logs() {
    echo -e "${BLUE}üìã Ch·ªçn logs ƒë·ªÉ xem:${NC}"
    echo "  1) All services"
    echo "  2) Host Agent"
    echo "  3) Order Agent"
    echo "  4) Advisor Agent"
    echo "  5) Search Agent"
    echo "  6) Back to main menu"
    echo
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-6): " log_choice
    
    case $log_choice in
        1)
            echo -e "${BLUE}üìÑ Showing logs for all services (Ctrl+C to exit)...${NC}"
            docker-compose logs -f
            ;;
        2)
            echo -e "${BLUE}üìÑ Showing Host Agent logs (Ctrl+C to exit)...${NC}"
            docker-compose logs -f host_agent
            ;;
        3)
            echo -e "${BLUE}üìÑ Showing Order Agent logs (Ctrl+C to exit)...${NC}"
            docker-compose logs -f order_agent
            ;;
        4)
            echo -e "${BLUE}üìÑ Showing Advisor Agent logs (Ctrl+C to exit)...${NC}"
            docker-compose logs -f advisor_agent
            ;;
        5)
            echo -e "${BLUE}üìÑ Showing Search Agent logs (Ctrl+C to exit)...${NC}"
            docker-compose logs -f search_agent
            ;;
        6)
            return
            ;;
        *)
            echo -e "${RED}‚ùå Invalid choice${NC}"
            ;;
    esac
}

# Main menu loop
while true; do
    show_menu
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-6): " choice
    
    case $choice in
        1)
            echo -e "${YELLOW}‚ö†Ô∏è  ƒê·∫£m b·∫£o b·∫°n ƒë√£ ch·ªânh s·ª≠a c√°c file *.env.example v·ªõi config th·ª±c t·∫ø!${NC}"
            read -p "B·∫°n ƒë√£ ch·ªânh s·ª≠a c√°c file *.env.example ch∆∞a? (y/N): " env_ready
            if [[ $env_ready == "y" || $env_ready == "Y" ]]; then
                copy_env_files
                deploy_system
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Vui l√≤ng ch·ªânh s·ª≠a c√°c file *.env.example tr∆∞·ªõc:${NC}"
                echo "  ‚Ä¢ host_agent.env.example"
                echo "  ‚Ä¢ order_agent.env.example"
                echo "  ‚Ä¢ advisor_agent.env.example"
                echo "  ‚Ä¢ search_agent.env.example"
            fi
            ;;
        2)
            deploy_system
            ;;
        3)
            deploy_system_no_cache
            ;;
        4)
            stop_system
            ;;
        5)
            view_logs
            ;;
        6)
            echo -e "${GREEN}üëã Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Invalid choice. Please enter 1-6${NC}"
            ;;
    esac
    
    echo
    read -p "Press Enter to continue..."
done 